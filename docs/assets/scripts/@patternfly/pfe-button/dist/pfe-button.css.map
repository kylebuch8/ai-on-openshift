{"version":3,"sources":["pfe-button.scss","pfe-button.css","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AAgCA;EACE,qBAAqB;AC/BvB;;ADkCA;EACE,aAAa;AC/Bf;;ADmCE;EAEE,sBEoCgC;EFpChC,8FEoCgC;EFnChC,WEmCgC;EFnChC,6EEmCgC;EFlChC,eEkCgC;EFlChC,4EEkCgC;EFjChC,oBETgC;EFShC,mDETgC;EFUhC,gBEgCgC;EFhChC,sFEgCgC;EF/BhC,4BE+BgC;EF/BhC,kIE+BgC;EF9BhC,eAAe;EACf,kBE6BgC;EF7BhC,6FE6BgC;EF5BhC,SE4BgC;EF5BhC,oCE4BgC;EF3BhC,kBAAkB;EAClB,gBE0BgC;EF1BhC,8EE0BgC;AD3DpC;;ADqBE;EAeI,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;EACT,WAAW;EACX,6BEiB8B;EFjB9B,8KEiB8B;EFhB9B,kBEgB8B;EFhB9B,6FEgB8B;ADhDpC;;ADUE;EA2BI,4HAA8B;EAC9B,iNAA4B;ACjClC;;ADqCE;EACE,yBEKgC;EFLhC,mHEKgC;ADvCpC;;ADiCE;EAKI,8HAA8B;AClCpC;;ADsCE;;;EAGE,6BENgC;EFMhC,iEENgC;AD7BpC;;ADgCE;;;;;EAOI,qFAA8B;EAC9B,8MAA4B;AC/BlC;;ADmCE;EACE,WEhBgC;EFgBhC,yEEhBgC;ADhBpC;;AD+BE;EAII,kBEnB8B;EFmB9B,6FEnB8B;ADZpC;;ADmCE;EACE,cExBgC;EFwBhC,uEExBgC;ADRpC;;AD+BE;EAII,qBE3B8B;EF2B9B,2FE3B8B;ADJpC;;ADmCE;EACE,cEhCgC;EFgChC,uEEhCgC;EFiChC,gBEjCgC;EFiChC,iDEjCgC;ADCpC;;AD8BE;EAMI,+HAAiC;AChCvC;;AD0BE;EASM,wBElF4B;EFkF5B,gEElF4B;EFmF5B,yBEnF4B;EFmF5B,6DEnF4B;ADoDpC;;ADqBE;EAeI,qBE9C8B;EF8C9B,2GE9C8B;EF+C9B,4BEzF8B;EFyF9B,iEEzF8B;ADyDpC;;ADoCE;EACE,yBEpDgC;EFoDhC,wGEpDgC;ADmBpC;;ADoCE;EACE,6GAAyB;EACzB,mEAAsB;ACjC1B;;ADoCE;EACE,yBE7DgC;EF6DhC,mGE7DgC;EF8DhC,cE9DgC;EF8DhC,oFE9DgC;EF+DhC,oBAAoB;ACjCxB;;AD8BE;EAKI,SEjE8B;EFiE9B,2CEjE8B;ADkCpC;;AD0BE;EAUI,uHAA8B;EAC9B,uEAA4B;AChClC","file":"pfe-button.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: button;\n\n$LOCAL-VARIABLES: (\n  BackgroundColor: pfe-var(ui-accent),\n  BackgroundColor--hover: pfe-var(ui-accent--hover),\n  Color: pfe-var(ui-base--text),\n  FontSize: pfe-var(FontSize--md),\n  FontWeight: pfe-var(font-weight--normal),\n  Border: 0,\n  BorderRadius: pfe-var(surface--border-radius),\n  Padding: calc(#{pfe-var(container-padding)} / 2) pfe-var(container-padding),\n  LineHeight: pfe-var(line-height),\n  after: (\n    BorderColor: transparent,\n    BorderColor--hover: transparent,\n  ),\n);\n\n// Nested internal variables (pfe-local calls), maps cannot \"self-reference\"\n$LOCAL-VARIABLES: map-deep-merge(\n  $LOCAL-VARIABLES,\n  (\n    after: (\n      Border: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor, $region: after),\n      Border--hover: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-local(BorderColor--hover, $region: after),\n    ),\n  )\n);\n\n:host {\n  display: inline-block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\nbutton {\n  :host([variant=\"primary\"]) &,\n  & {\n    background-color: pfe-local(BackgroundColor);\n    color: pfe-local(Color);\n    font-size: pfe-local(FontSize);\n    font-family: pfe-var(font-family, $fallback: inherit);\n    font-weight: pfe-local(FontWeight);\n    padding: pfe-local(Padding);\n    cursor: pointer;\n    border-radius: pfe-local(BorderRadius);\n    border: pfe-local(Border);\n    position: relative;\n    line-height: pfe-local(LineHeight);\n\n    &::after {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      content: \"\";\n      border: pfe-local(Border, $region: after);\n      border-radius: pfe-local(BorderRadius);\n    }\n\n    &:hover,\n    &:focus {\n      --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover)};\n      --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after)};\n    }\n  }\n\n  :host([variant=\"danger\"]) & {\n    background-color: pfe-local(BackgroundColor, pfe-var(feedback--critical--lighter));\n\n    &:hover,\n    &:focus {\n      --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover, pfe-var(feedback--critical))};\n    }\n  }\n\n  :host([variant=\"secondary\"]) &,\n  :host([variant=\"tertiary\"]) &,\n  :host([variant=\"control\"]) & {\n    background-color: pfe-local(BackgroundColor, transparent);\n\n    &:hover,\n    &:focus {\n      --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover, transparent)};\n      --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after, $fallback: pfe-var(ui--border-width--md) pfe-var(ui--border-style) pfe-local(BorderColor, $region: after))};\n    }\n  }\n\n  :host([variant=\"secondary\"]) & {\n    color: pfe-local(Color, pfe-var(ui-accent));\n\n    &::after {\n      border-color: pfe-local(BorderColor, $region: after, $fallback: pfe-var(ui-accent));\n    }\n  }\n\n  :host([variant=\"tertiary\"]) & {\n    color: pfe-local(Color, pfe-var(text));\n\n    &::after {\n      border-color: pfe-local(BorderColor, $region: after, $fallback: pfe-var(text));\n    }\n  }\n\n  :host([variant=\"control\"]) & {\n    color: pfe-local(Color, pfe-var(text));\n    border-radius: pfe-local(BorderRadius, 0);\n\n    &:hover,\n    &:focus {\n      --pfe-button__after--BorderColor: #{pfe-local(BorderColor--hover, pfe-var(ui--border--lightest))};\n\n      &::after {\n        border-bottom-width: pfe-var(ui--border-width--md);\n        border-bottom-color: pfe-var(ui-accent);\n      }\n    }\n\n    &::after {\n      border-color: pfe-local(BorderColor, $region: after, $fallback: pfe-var(ui--border--lightest));\n      border-bottom-color: pfe-var(ui--border);\n    }\n  }\n\n  :host([variant=\"control\"][disabled]) & {\n    background-color: pfe-local(BackgroundColor, pfe-var(surface--lighter));\n  }\n\n  :host([size=\"large\"]) & {\n    --pfe-button--FontWeight: #{pfe-local(FontWeight--large, $fallback: pfe-var(font-weight--semi-bold))};\n    --pfe-button--Padding: #{pfe-local(Padding--large, $fallback: 12px 24px)};\n  }\n\n  :host([disabled]) & {\n    background-color: pfe-local(BackgroundColor, pfe-var(ui-disabled));\n    color: pfe-local(Color, pfe-var(ui-disabled--text));\n    pointer-events: none;\n    &::after {\n      border: pfe-local(Border, $region: after, $fallback: 0);\n    }\n\n    &:hover,\n    &:focus {\n      --pfe-button--BackgroundColor: #{pfe-local(BackgroundColor--hover, pfe-var(ui-disabled))};\n      --pfe-button__after--Border: #{pfe-local(Border--hover, $region: after, $fallback: 0)};\n    }\n  }\n}\n",":host {\n  display: inline-block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([variant=\"primary\"]) button, button {\n  background-color: var(--pfe-button--BackgroundColor, var(--pfe-theme--color--ui-accent, #06c));\n  color: var(--pfe-button--Color, var(--pfe-theme--color--ui-base--text, #fff));\n  font-size: var(--pfe-button--FontSize, var(--pf-global--FontSize--md, 1rem));\n  font-family: var(--pfe-theme--font-family, inherit);\n  font-weight: var(--pfe-button--FontWeight, var(--pfe-theme--font-weight--normal, 400));\n  padding: var(--pfe-button--Padding, calc(var(--pfe-theme--container-padding, 1rem) / 2) var(--pfe-theme--container-padding, 1rem));\n  cursor: pointer;\n  border-radius: var(--pfe-button--BorderRadius, var(--pfe-theme--surface--border-radius, 3px));\n  border: var(--pfe-button--Border, 0);\n  position: relative;\n  line-height: var(--pfe-button--LineHeight, var(--pfe-theme--line-height, 1.5));\n}\n\n:host([variant=\"primary\"]) button::after, button::after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  content: \"\";\n  border: var(--pfe-button__after--Border, var(--pfe-theme--ui--border-width, 1px) var(--pfe-theme--ui--border-style, solid) var(--pfe-button__after--BorderColor, transparent));\n  border-radius: var(--pfe-button--BorderRadius, var(--pfe-theme--surface--border-radius, 3px));\n}\n\n:host([variant=\"primary\"]) button:hover, :host([variant=\"primary\"]) button:focus, button:hover, button:focus {\n  --pfe-button--BackgroundColor: var(--pfe-button--BackgroundColor--hover, var(--pfe-theme--color--ui-accent--hover, #004080));\n  --pfe-button__after--Border: var(--pfe-button__after--Border--hover, var(--pfe-theme--ui--border-width, 1px) var(--pfe-theme--ui--border-style, solid) var(--pfe-button__after--BorderColor--hover, transparent));\n}\n\n:host([variant=\"danger\"]) button {\n  background-color: var(--pfe-button--BackgroundColor, var(--pfe-theme--color--feedback--critical--lighter, #c9190b));\n}\n\n:host([variant=\"danger\"]) button:hover, :host([variant=\"danger\"]) button:focus {\n  --pfe-button--BackgroundColor: var(--pfe-button--BackgroundColor--hover, var(--pfe-theme--color--feedback--critical, #a30000));\n}\n\n:host([variant=\"secondary\"]) button,\n:host([variant=\"tertiary\"]) button,\n:host([variant=\"control\"]) button {\n  background-color: var(--pfe-button--BackgroundColor, transparent);\n}\n\n:host([variant=\"secondary\"]) button:hover, :host([variant=\"secondary\"]) button:focus,\n:host([variant=\"tertiary\"]) button:hover,\n:host([variant=\"tertiary\"]) button:focus,\n:host([variant=\"control\"]) button:hover,\n:host([variant=\"control\"]) button:focus {\n  --pfe-button--BackgroundColor: var(--pfe-button--BackgroundColor--hover, transparent);\n  --pfe-button__after--Border: var(--pfe-button__after--Border--hover, var(--pfe-theme--ui--border-width--md, 2px) var(--pfe-theme--ui--border-style, solid) var(--pfe-button__after--BorderColor, transparent));\n}\n\n:host([variant=\"secondary\"]) button {\n  color: var(--pfe-button--Color, var(--pfe-theme--color--ui-accent, #06c));\n}\n\n:host([variant=\"secondary\"]) button::after {\n  border-color: var(--pfe-button__after--BorderColor, var(--pfe-theme--color--ui-accent, #06c));\n}\n\n:host([variant=\"tertiary\"]) button {\n  color: var(--pfe-button--Color, var(--pfe-theme--color--text, #151515));\n}\n\n:host([variant=\"tertiary\"]) button::after {\n  border-color: var(--pfe-button__after--BorderColor, var(--pfe-theme--color--text, #151515));\n}\n\n:host([variant=\"control\"]) button {\n  color: var(--pfe-button--Color, var(--pfe-theme--color--text, #151515));\n  border-radius: var(--pfe-button--BorderRadius, 0);\n}\n\n:host([variant=\"control\"]) button:hover, :host([variant=\"control\"]) button:focus {\n  --pfe-button__after--BorderColor: var(--pfe-button--BorderColor--hover, var(--pfe-theme--color--ui--border--lightest, #f0f0f0));\n}\n\n:host([variant=\"control\"]) button:hover::after, :host([variant=\"control\"]) button:focus::after {\n  border-bottom-width: var(--pfe-theme--ui--border-width--md, 2px);\n  border-bottom-color: var(--pfe-theme--color--ui-accent, #06c);\n}\n\n:host([variant=\"control\"]) button::after {\n  border-color: var(--pfe-button__after--BorderColor, var(--pfe-theme--color--ui--border--lightest, #f0f0f0));\n  border-bottom-color: var(--pfe-theme--color--ui--border, #8a8d90);\n}\n\n:host([variant=\"control\"][disabled]) button {\n  background-color: var(--pfe-button--BackgroundColor, var(--pfe-theme--color--surface--lighter, #f0f0f0));\n}\n\n:host([size=\"large\"]) button {\n  --pfe-button--FontWeight: var(--pfe-button--FontWeight--large, var(--pfe-theme--font-weight--semi-bold, 600));\n  --pfe-button--Padding: var(--pfe-button--Padding--large, 12px 24px);\n}\n\n:host([disabled]) button {\n  background-color: var(--pfe-button--BackgroundColor, var(--pfe-theme--color--ui-disabled, #d2d2d2));\n  color: var(--pfe-button--Color, var(--pfe-theme--color--ui-disabled--text, #6a6e73));\n  pointer-events: none;\n}\n\n:host([disabled]) button::after {\n  border: var(--pfe-button__after--Border, 0);\n}\n\n:host([disabled]) button:hover, :host([disabled]) button:focus {\n  --pfe-button--BackgroundColor: var(--pfe-button--BackgroundColor--hover, var(--pfe-theme--color--ui-disabled, #d2d2d2));\n  --pfe-button__after--Border: var(--pfe-button__after--Border--hover, 0);\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"],"sourceRoot":"../src"}