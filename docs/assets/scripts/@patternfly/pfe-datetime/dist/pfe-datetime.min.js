import t from"../../pfelement/dist/pfelement.min.js";
/*!
 * PatternFly Elements: PfeDatetime 1.12.3
 * @license
 * Copyright 2021 Red Hat, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
*/class e extends t{static get version(){return"1.12.3"}get html(){return"\n<style>:host{display:inline} /*# sourceMappingURL=pfe-datetime.min.css.map */</style>\n<span></span>"}static get tag(){return"pfe-datetime"}get styleUrl(){return"pfe-datetime.scss"}get templateUrl(){return"pfe-datetime.html"}get _dateTimeType(){return this.format||this.type||e.properties.format.default}static get properties(){return{format:{title:"Format",type:String,values:["local","relative"],default:"local"},oldType:{alias:"format",attr:"type"},datetime:{title:"Date and time",type:String,observer:"_datetimeChanged",prefix:!1},timestamp:{title:"Timestamp",type:String,observer:"_timestampChanged",prefix:!1}}}constructor(){super(e)}_datetimeChanged(t,e){Date.parse(e)&&(Date.parse(e)&&this._datetime===Date.parse(e)||this.setDate(Date.parse(e)))}_timestampChanged(t,e){this._timestamp!==e?(this._timestamp=e,this.setDate(new Date(1e3*e))):this.log("early return")}setDate(t){this._datetime=t,this.shadowRoot.querySelector("span").innerText=window.Intl?this._getTypeString():t.toLocaleString()}_getOptions(){const t={weekday:{short:"short",long:"long"},day:{numeric:"numeric","2-digit":"2-digit"},month:{short:"short",long:"long"},year:{numeric:"numeric","2-digit":"2-digit"},hour:{numeric:"numeric","2-digit":"2-digit"},minute:{numeric:"numeric","2-digit":"2-digit"},second:{numeric:"numeric","2-digit":"2-digit"},timeZoneName:{short:"short",long:"long"}};let e={};for(const i in t){let a=i.replace(/[\w]([A-Z])/g,t=>t[0]+"-"+t[1]).toLowerCase();const r=t[i][this.getAttribute(a)];r&&(e[i]=r)}return this.getAttribute("time-zone")&&(e.timeZone=this.getAttribute("time-zone")),e}_getTypeString(){const t=this._getOptions(),e=this.getAttribute("locale")||navigator.language;let i="";switch(this._dateTimeType){case"local":i=new Intl.DateTimeFormat(e,t).format(this._datetime);break;case"relative":i=this._getTimeRelative(this._datetime-Date.now());break;default:i=this._datetime}return i}_getTimeRelative(t){const e=t>0?"until":"ago";let i="just now";const a=Math.round(Math.abs(t)/1e3),r=Math.round(a/60),s=Math.round(r/60),n=Math.round(s/24),o=Math.round(n/30),m=Math.round(o/12);return o>=18?i=m+" years":o>=12?i="a year":n>=45?i=o+" months":n>=30?i="a month":s>=36?i=n+" days":s>=24?i="a day":r>=90?i=s+" hours":r>=45?i="an hour":a>=90?i=r+" minutes":a>=45?i="a minute":a>=10&&(i=a+" seconds"),"just now"!==i?`${i} ${e}`:i}}t.create(e);export default e;

