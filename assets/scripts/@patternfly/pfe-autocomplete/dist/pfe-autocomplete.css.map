{"version":3,"sources":["pfe-autocomplete.scss","../../pfe-sass/extends/_extends.scss","pfe-autocomplete.css","../../pfe-sass/mixins/_mixins.scss","../../pfe-sass/mixins/_custom-properties.scss","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"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","file":"pfe-autocomplete.css","sourcesContent":["@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: autocomplete;\n\n$LOCAL-VARIABLES: (\n  BoxShadow: pfe-var(box-shadow--inset),\n  BackgroundColor: pfe-var(surface--lightest),\n  Border: pfe-var(ui--border-width) pfe-var(ui--border-style) pfe-var(surface--border)\n);\n\n@include pfe-contexts; // imports on=\"light\" etc support\n\n:host {\n  display: block;\n  position: relative;\n  font-family: pfe-var(font-family);\n  @include pfe-print-local($LOCAL-VARIABLES);\n}\n\n:host([button-text]) {\n  display: flex;\n  #wrapper {\n    flex: 1;\n  }\n\n  #input-box-wrapper {\n    position: relative;\n  }\n\n  button.clear-search {\n    width: 40px;\n    right: 0px;\n  }\n}\n\n\n// this isn't working, I don't know why\n:host([button-text]) ::slotted(input[type=\"search\"]::-webkit-search-cancel-button) {\n  -webkit-appearance: none;\n}\n\n.sr-only {\n  @extend %sr-only;\n}\n\n#input-box-wrapper {\n  border-color: pfe-var(feedback--info);\n\n  ::slotted(input) {\n    width: 100%;\n    flex: 1;\n    box-shadow: pfe-local(BoxShadow) !important;\n    padding-left: 10px;\n    padding-right: 0;\n    border-radius: pfe-var(ui--border-radius);\n    background-color: pfe-local(BackgroundColor);\n    border: pfe-local(Border);\n    font-size: pfe-var(font-size);\n    font-family: pfe-var(font-family);\n    height: calc(#{pfe-var(ui--element--size)} * 2);\n    transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n    opacity: 1;\n    outline: 0;\n  }\n\n  ::slotted(input:disabled),\n  button:disabled {\n    cursor: not-allowed;\n    // background-color: transparent;\n    // @TODO: Replace with a variable\n    color: #ccc;\n    // opacity: 0.5;\n  }\n\n  ::slotted(input:disabled) {\n    padding-right: 10px;\n  }\n\n  button:focus,\n  ::slotted(input:focus) {\n    outline: 0;\n  }\n\n  ::slotted(input),\n  button {\n    -webkit-appearance: none;\n  }\n\n  ::slotted([type=\"search\"]::-ms-clear) {\n    display: none;\n  }\n\n  ::slotted(input[type=\"search\"]::-webkit-search-cancel-button),\n  ::slotted(input[type=\"search\"]::-webkit-search-decoration) {\n    -webkit-appearance: none;\n  }\n}\n\nbutton {\n  color: pfe-var(ui-base);\n  background-color: transparent;\n  border: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  cursor: pointer;\n\n  &.clear-search {\n    right: 30px;\n    width: 20px;\n    margin: 2px 1px;\n    background-color: pfe-var(surface--lightest);\n    &:hover {\n      color: pfe-var(ui-base);\n    }\n    svg {\n      width: 14px;\n      position: relative;\n      top: 2px;\n      stroke: pfe-var(surface--border);\n    }\n    &:hover svg,\n    &:focus svg {\n      opacity: 1;\n      stroke: pfe-var(link);\n    }\n  }\n\n  &[disabled].clear-search:hover svg,\n  &[disabled].clear-search:focus svg {\n    stroke: pfe-var(surface--border);\n  }\n\n  &.search-button {\n    margin-top: 1px;\n    margin-bottom: 1px;\n    right: 1px;\n    width: 30px;\n    background-color: pfe-var(surface--lightest);\n    svg {\n      fill: pfe-var(link);\n      // width: 16px;\n      width: 18px;\n      position: relative;\n      top: 2px;\n      stroke: pfe-var(surface--border);\n    }\n\n    &:hover svg,\n    &:focus svg {\n      fill: pfe-var(link--hover);\n    }\n\n    &:disabled svg {\n      fill: pfe-var(ui-disabled);\n    }\n  }\n}\n\npfe-button.search-button--textual {\n  margin-left: 16px;\n}\n\n.loading {\n  position: absolute;\n  width: 30px;\n  right: 52px;\n  top: 0px;\n  bottom: 0px;\n  svg {\n    width: 26px;\n    padding-top: 7px;\n  }\n}\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-padding);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n",".sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host {\n    /* IE10+ */\n    color: #151515 !important;\n  }\n}\n\n:host([on=\"dark\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n  --pfe-broadcasted--text--muted: var(--pfe-theme--color--text--muted--on-dark, #d2d2d2);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #73bcf7);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #bee1f4);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #bee1f4);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #bee1f4);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration--on-dark, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover--on-dark, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus--on-dark, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited--on-dark, none);\n}\n\n:host([on=\"saturated\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text--on-saturated, #fff);\n  --pfe-broadcasted--text--muted: var(--pfe-theme--color--text--muted--on-saturated, #d2d2d2);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link--on-saturated, #fff);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-saturated, #fafafa);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-saturated, #fafafa);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-saturated, #d2d2d2);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration--on-saturated, underline);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover--on-saturated, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus--on-saturated, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited--on-saturated, underline);\n}\n\n:host([on=\"light\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text, #151515);\n  --pfe-broadcasted--text--muted: var(--pfe-theme--color--text--muted, #6a6e73);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link, #06c);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover, #004080);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus, #004080);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited, #6753ac);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited, none);\n}\n\n:host {\n  display: block;\n  position: relative;\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  --pfe-autocomplete--BoxShadow: var(--pfe-theme--box-shadow--inset, inset 0 0 0.625rem 0 #fafafa);\n  --pfe-autocomplete--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n  --pfe-autocomplete--Border: var(--pfe-theme--ui--border-width, 1px) var(--pfe-theme--ui--border-style, solid) var(--pfe-theme--color--surface--border, #d2d2d2);\n}\n\n:host([button-text]) {\n  display: flex;\n}\n\n:host([button-text]) #wrapper {\n  flex: 1;\n}\n\n:host([button-text]) #input-box-wrapper {\n  position: relative;\n}\n\n:host([button-text]) button.clear-search {\n  width: 40px;\n  right: 0px;\n}\n\n:host([button-text]) ::slotted(input[type=\"search\"]::-webkit-search-cancel-button) {\n  -webkit-appearance: none;\n}\n\n#input-box-wrapper {\n  border-color: var(--pfe-theme--color--feedback--info, #06c);\n}\n\n#input-box-wrapper ::slotted(input) {\n  width: 100%;\n  flex: 1;\n  box-shadow: var(--pfe-autocomplete--BoxShadow, var(--pfe-theme--box-shadow--inset, inset 0 0 0.625rem 0 #fafafa)) !important;\n  padding-left: 10px;\n  padding-right: 0;\n  border-radius: var(--pfe-theme--ui--border-radius, 2px);\n  background-color: var(--pfe-autocomplete--BackgroundColor, var(--pfe-theme--color--surface--lightest, #fff));\n  border: var(--pfe-autocomplete--Border, var(--pfe-theme--ui--border-width, 1px) var(--pfe-theme--ui--border-style, solid) var(--pfe-theme--color--surface--border, #d2d2d2));\n  font-size: var(--pfe-theme--font-size, 1rem);\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  height: calc(var(--pfe-theme--ui--element--size, 20px) * 2);\n  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n  opacity: 1;\n  outline: 0;\n}\n\n#input-box-wrapper ::slotted(input:disabled),\n#input-box-wrapper button:disabled {\n  cursor: not-allowed;\n  color: #ccc;\n}\n\n#input-box-wrapper ::slotted(input:disabled) {\n  padding-right: 10px;\n}\n\n#input-box-wrapper button:focus,\n#input-box-wrapper ::slotted(input:focus) {\n  outline: 0;\n}\n\n#input-box-wrapper ::slotted(input),\n#input-box-wrapper button {\n  -webkit-appearance: none;\n}\n\n#input-box-wrapper ::slotted([type=\"search\"]::-ms-clear) {\n  display: none;\n}\n\n#input-box-wrapper ::slotted(input[type=\"search\"]::-webkit-search-cancel-button),\n#input-box-wrapper ::slotted(input[type=\"search\"]::-webkit-search-decoration) {\n  -webkit-appearance: none;\n}\n\nbutton {\n  color: var(--pfe-theme--color--ui-base, #6a6e73);\n  background-color: transparent;\n  border: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  cursor: pointer;\n}\n\nbutton.clear-search {\n  right: 30px;\n  width: 20px;\n  margin: 2px 1px;\n  background-color: var(--pfe-theme--color--surface--lightest, #fff);\n}\n\nbutton.clear-search:hover {\n  color: var(--pfe-theme--color--ui-base, #6a6e73);\n}\n\nbutton.clear-search svg {\n  width: 14px;\n  position: relative;\n  top: 2px;\n  stroke: var(--pfe-theme--color--surface--border, #d2d2d2);\n}\n\nbutton.clear-search:hover svg,\nbutton.clear-search:focus svg {\n  opacity: 1;\n  stroke: var(--pfe-theme--color--link, #06c);\n}\n\nbutton[disabled].clear-search:hover svg,\nbutton[disabled].clear-search:focus svg {\n  stroke: var(--pfe-theme--color--surface--border, #d2d2d2);\n}\n\nbutton.search-button {\n  margin-top: 1px;\n  margin-bottom: 1px;\n  right: 1px;\n  width: 30px;\n  background-color: var(--pfe-theme--color--surface--lightest, #fff);\n}\n\nbutton.search-button svg {\n  fill: var(--pfe-theme--color--link, #06c);\n  width: 18px;\n  position: relative;\n  top: 2px;\n  stroke: var(--pfe-theme--color--surface--border, #d2d2d2);\n}\n\nbutton.search-button:hover svg,\nbutton.search-button:focus svg {\n  fill: var(--pfe-theme--color--link--hover, #004080);\n}\n\nbutton.search-button:disabled svg {\n  fill: var(--pfe-theme--color--ui-disabled, #d2d2d2);\n}\n\npfe-button.search-button--textual {\n  margin-left: 16px;\n}\n\n.loading {\n  position: absolute;\n  width: 30px;\n  right: 52px;\n  top: 0px;\n  bottom: 0px;\n}\n\n.loading svg {\n  width: 26px;\n  padding-top: 7px;\n}\n","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// This will print all the broadcast variables, and set the value to the context of your choosing, like on-dark or on-saturated.\n/// @param {String} $context - Look up values from contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @see $custom-prop-prefix\n/// @see $BROADCAST-VARS\n/// @example - scss - Usage in a container component, i.e. pfe-card\n///    :host {\n///      @include pfe-set-broadcast-context(dark);\n///    }\n/// @example - css - Rendered output\n///   :host {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///\n@mixin pfe-set-broadcast-context($context, $broadcast: $BROADCAST-VARS) {\n  @each $type in $broadcast {\n    $list: ();\n    $string: \"\";\n    $context_string: \"\";\n    $state: \"\";\n\n    @if str-starts-with($type, \"link\") {\n      $list: append($list, \"#{$type}\");\n\n      @each $s in (hover, focus, visited) {\n        $state: \"--#{$s}\";\n        $string: \"#{$type}#{$state}\";\n\n        @if not index($list, $string) {\n          $list: append($list, \"#{$type}#{$state}\");\n        }\n      }\n    } @else {\n      @if not index($list, $string) {\n        $list: append($list, \"#{$type}\");\n      }\n    }\n\n    @if index($CONTEXTS, $context) != null {\n      @if $context != \"light\" {\n        $context_string: \"--on-#{$context}\";\n      }\n    }\n\n    @each $item in $list {\n      @if not index($BROADCAST-VARS, $type) {\n        @warn \"--#{$custom-prop-prefix}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n      } @else if not pfe-broadcasted(#{$item}#{$context_string}) {\n        @warn \"#{$item}#{$context_string} value does not currently exist.\";\n      } @else {\n        @if index($CONTEXTS, $context) != null {\n          --#{$custom-prop-prefix}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context_string})};\n        } @else {\n          @error \"The #{$context} context does not appear to be part of a supported context.\";\n        }\n      }\n    }\n  }\n}\n\n/// Returns CSS Variable for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example - scss\n///   :host {\n///       padding-top:      pfe-local(paddingTop);\n///       padding-bottom:   pfe-local(paddingBottom);\n///   }\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n  @each $property, $value in $map {\n    $name: \"--#{$property}\";\n    $styles: $value;\n\n    @if type-of($value) == \"map\" {\n      @each $prop, $v in $value {\n        $name: \"__#{$property}--#{$prop}\";\n        $styles: $v;\n\n        // Print the variable definition\n        --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n      }\n    } @else {\n      // Print the variable definition\n      --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n    }\n  }\n}\n\n/// Surface properties\n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct context colors.\n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n/// @example - scss - In your component stylesheet\n///   $LOCAL: band;\n///   @include pfe-surfaces;\n/// @example - css - Rendered result\n///   :host([color=\"darker\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///     --context: dark;\n///   }\n///   :host([color=\"darkest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///     --context: dark;\n///   }\n///   :host([color=\"base\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///     --context: light;\n///   }\n///   :host([color=\"lighter\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///     --context: light;\n///   }\n///   :host([color=\"lightest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///     --context: light;\n///   }\n///   :host([color=\"accent\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///     --context: saturated;\n///   }\n///   :host([color=\"complement\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///     --context: saturated;\n///   }\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: color) {\n  @each $color in $surfaces {\n    $context: #{pfe-get-context(surface--#{$color}--context)};\n    :host([#{$attr-name}=\"#{$color}\"]) {\n      @include pfe-print-local(\n        (\n          BackgroundColor: pfe-var(surface--#{$color}),\n          context: pfe-var(surface--#{$color}--context, #{$context})\n        )\n      );\n      @extend %fallback-surface;\n    }\n  }\n}\n\n/// Prints the `on` attribute with IE11 fallbacks\n/// @param {List} contexts [$CONTEXTS] - defaults to the global $CONTEXTS list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example - scss - In your component styles\n///   @include pfe-contexts; // imports on=\"light\" etc support\n/// @example - css - Rendered outputs\n///   :host([on=\"dark\"]) {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///   @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///     :host([on=\"dark\"]) {\n///       color: #fff;\n///       color: var(--pfe-theme--color--text--on-dark, #fff);\n///     }\n///   }\n///   // ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"])\n@mixin pfe-contexts($contexts: $CONTEXTS, $ie-fallback: true) {\n  // Helper attributes to aid in theming\n  @each $context in $contexts {\n    :host([on=\"#{$context}\"]) {\n      @include pfe-set-broadcast-context($context);\n    }\n  }\n  @if $ie-fallback {\n    :host {\n      @extend %fallback-text;\n    }\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"],"sourceRoot":"../src"}