{"version":3,"file":"pfe-avatar.umd.min.js","sources":["../_temp/hslrgb.js","../_temp/pfe-avatar.umd.js","../_temp/djb-hash.js"],"sourcesContent":["function h2rgb(v1, v2, vH) {\n  if (vH < 0) vH += 1;\n  if (vH > 1) vH -= 1;\n  if (6 * vH < 1) return v1 + (v2 - v1) * 6 * vH;\n  if (2 * vH < 1) return v2;\n  if (3 * vH < 2) return v1 + (v2 - v1) * (2 / 3 - vH) * 6;\n  return v1;\n}\n\n/**\n * Convert an HSL color to RGB.\n *\n * @param {Number} H the hue component\n * @param {Number} S the saturation component\n * @param {Number} L the luminance component\n * @return {Array} [R, G, B]\n *\n * @see https://www.easyrgb.com/en/math.php\n */\nexport function hsl2rgb(_H, _S, _L) {\n  let R, G, B;\n\n  const H = Math.max(0, Math.min(1, _H));\n  const S = Math.max(0, Math.min(1, _S));\n  const L = Math.max(0, Math.min(1, _L));\n\n  if (S == 0) {\n    R = L * 255;\n    G = L * 255;\n    B = L * 255;\n  } else {\n    let a, b;\n\n    if (L < 0.5) {\n      b = L * (1 + S);\n    } else {\n      b = L + S - S * L;\n    }\n\n    a = 2 * L - b;\n\n    R = Math.floor(255 * h2rgb(a, b, H + 1 / 3));\n    G = Math.floor(255 * h2rgb(a, b, H));\n    B = Math.floor(255 * h2rgb(a, b, H - 1 / 3));\n  }\n\n  return [R, G, B];\n}\n\n/**\n * Convert an RGBcolor to HSL.\n *\n * @param {Number} R the red component\n * @param {Number} G the green component\n * @param {Number} B the blue component\n * @return {Array} [H, S, L]\n *\n * @see https://www.easyrgb.com/en/math.php\n */\nexport function rgb2hsl(_R, _G, _B) {\n  let H, S, L;\n\n  const R = Math.max(0, Math.min(255, _R));\n  const G = Math.max(0, Math.min(255, _G));\n  const B = Math.max(0, Math.min(255, _B));\n\n  const r = R / 255;\n  const g = G / 255;\n  const b = B / 255;\n\n  const var_min = Math.min(Math.min(r, g), b);\n  const var_max = Math.max(Math.max(r, g), b);\n  const del_max = var_max - var_min;\n\n  L = (var_max + var_min) / 2;\n\n  if (del_max === 0) {\n    H = 0;\n    S = 0;\n  } else {\n    if (L < 0.5) {\n      S = del_max / (var_max + var_min);\n    } else {\n      S = del_max / (2 - var_max - var_min);\n    }\n\n    const del_r = ((var_max - r) / 6 + del_max / 2) / del_max;\n    const del_g = ((var_max - g) / 6 + del_max / 2) / del_max;\n    const del_b = ((var_max - b) / 6 + del_max / 2) / del_max;\n\n    if (r == var_max) {\n      H = del_b - del_g;\n    } else if (g == var_max) {\n      H = 1 / 3 + del_r - del_b;\n    } else if (b == var_max) {\n      H = 2 / 3 + del_g - del_r;\n    }\n\n    if (H < 0) {\n      H += 1;\n    } else if (H > 1) {\n      H -= 1;\n    }\n  }\n\n  return [H, S, L];\n}\n","/*!\n * PatternFly Elements: PfeAvatar 1.12.3\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport PFElement from \"../../pfelement/dist/pfelement\";\nimport { hash } from \"./djb-hash.js\";\nimport { hsl2rgb, rgb2hsl } from \"./hslrgb.js\";\n\nclass PfeAvatar extends PFElement {\n\n  // Injected at build-time\n  static get version() {\n    return \"1.12.3\";\n  }\n\n  // Injected at build-time\n  get html() {\n    return `\n<style>:host{display:block;position:relative;width:128px;width:var(--pfe-avatar--size,var(--pfe-avatar--width,128px));height:128px;height:var(--pfe-avatar--size,var(--pfe-avatar--width,128px))}:host canvas{width:100%;height:100%;image-rendering:optimizeSpeed;image-rendering:-moz-crisp-edges;image-rendering:-webkit-optimize-contrast;image-rendering:-o-crisp-edges;image-rendering:-o-pixelated;image-rendering:pixelated;-ms-interpolation-mode:nearest-neighbor}:host([shape=rounded]) canvas,:host([shape=rounded]) img{border-radius:calc(128px / 8 + 1px);border-radius:calc(var(--pfe-avatar--size,var(--pfe-avatar--width,128px))/ 8 + 1px)}:host([shape=circle]) canvas,:host([shape=circle]) img{border-radius:50%}:host([src]) canvas{display:none}:host([src]) img{display:block;width:100%;height:100%;-o-object-fit:cover;object-fit:cover}:host(:not([src])) img{display:none}:host([hidden]){display:none} /*# sourceMappingURL=pfe-avatar.min.css.map */</style>\n<canvas></canvas>\n<img>`;\n  }\n\n  static get tag() {\n    return \"pfe-avatar\";\n  }\n\n  static get properties() {\n    return {\n      name: {\n        title: \"Username\",\n        type: String,\n        default: \"\",\n        observer: \"_updateWhenConnected\",\n      },\n      src: {\n        title: \"Avatar image URL\",\n        type: String,\n        observer: \"_updateWhenConnected\",\n      },\n      pattern: {\n        title: \"Shape pattern\",\n        type: String,\n        default: PfeAvatar.patterns.squares,\n        observer: \"_updateWhenConnected\",\n      },\n      // @TODO Deprecated pfe-name in 1.0\n      oldName: {\n        alias: \"name\",\n        attr: \"pfe-name\",\n      },\n      // @TODO Deprecated pfe-src in 1.0\n      oldSrc: {\n        alias: \"src\",\n        attr: \"pfe-src\",\n      },\n      // @TODO Deprecated pfe-pattern in 1.0\n      oldPattern: {\n        alias: \"pattern\",\n        attr: \"pfe-pattern\",\n      },\n    };\n  }\n\n  get templateUrl() {\n    return \"pfe-avatar.html\";\n  }\n\n  get styleUrl() {\n    return \"pfe-avatar.scss\";\n  }\n\n  static get events() {\n    return {\n      connected: `${this.tag}:connected`,\n    };\n  }\n\n  static get patterns() {\n    return {\n      triangles: \"triangles\",\n      squares: \"squares\",\n    };\n  }\n\n  static get defaultSize() {\n    return 128;\n  }\n\n  static get defaultColors() {\n    return \"#67accf #448087 #709c6b #a35252 #826cbb\";\n  }\n\n  get customColors() {\n    return this.cssVariable(\"pfe-avatar--colors\");\n  }\n\n  constructor() {\n    super(PfeAvatar);\n\n    this._initCanvas = this._initCanvas.bind(this);\n  }\n\n  connectedCallback() {\n    // initCanvas comes before parent's connectedCallback because the\n    // connectedCallback sets attribute values, triggering, the observer\n    // functions, which require the canvas to already be initialized.\n    this._initCanvas();\n\n    super.connectedCallback();\n\n    this.emitEvent(PfeAvatar.events.connected, {\n      bubbles: false,\n    });\n  }\n\n  _initCanvas() {\n    this._canvas = this.shadowRoot.querySelector(\"canvas\");\n    const cssVarWidth = this.cssVariable(\"pfe-avatar--width\");\n    const size = (cssVarWidth && cssVarWidth.replace(/px$/, \"\")) || PfeAvatar.defaultSize;\n    this._canvas.width = size;\n    this._canvas.height = size;\n\n    this._squareSize = this._canvas.width / 8;\n    this._triangleSize = this._canvas.width / 4;\n\n    this._ctx = this._canvas.getContext(\"2d\");\n  }\n\n  static _registerColors() {\n    this.colors = [];\n    const contextColors = this.customColors || this.defaultColors;\n\n    contextColors.split(/\\s+/).forEach((colorCode) => {\n      let pattern;\n      switch (colorCode.length) {\n        case 4: // ex: \"#0fc\"\n          pattern = /^#([A-f0-9])([A-f0-9])([A-f0-9])$/.exec(colorCode);\n          if (pattern) {\n            pattern.shift();\n            const color = pattern.map((c) => parseInt(c + c, 16));\n            this._registerColor(color);\n          } else {\n            this.log(`[pfe-avatar] invalid color ${colorCode}`);\n          }\n          break;\n        case 7: // ex: \"#00ffcc\"\n          pattern = /^#([A-f0-9]{2})([A-f0-9]{2})([A-f0-9]{2})$/.exec(colorCode);\n          if (pattern) {\n            pattern.shift();\n            const color = pattern.map((c) => parseInt(c, 16));\n            this._registerColor(color);\n          } else {\n            this.log(`[pfe-avatar] invalid color ${colorCode}`);\n          }\n      }\n    });\n\n    return this.colors;\n  }\n\n  static _registerColor(color) {\n    PfeAvatar.colors.push({\n      color1: `rgb(${color.join(\",\")})`,\n      color2: `rgb(${this._adjustColor(color).join(\",\")})`,\n    });\n  }\n\n  static _adjustColor(color) {\n    const dark = 0.1;\n    const l_adj = 0.1; // luminance adjustment\n    const hsl = rgb2hsl(...color);\n\n    // if luminance is too dark already, then lighten the alternate color\n    // instead of darkening it.\n    hsl[2] += hsl[2] > dark ? -l_adj : l_adj;\n\n    return hsl2rgb(...hsl);\n  }\n\n  _updateWhenConnected() {\n    if (this.hasAttribute(\"pfelement\")) {\n      this.update();\n    } else {\n      this.addEventListener(PfeAvatar.events.connected, () => this.update());\n    }\n  }\n\n  update() {\n    // if we have a src element, update the img, otherwise update the random pattern\n    if (this.src) {\n      this.shadowRoot.querySelector(\"img\").src = this.src;\n    } else {\n      const bitPattern = hash(this.name).toString(2);\n      const arrPattern = bitPattern.split(\"\").map((n) => Number(n));\n      this._colorIndex = Math.floor((PfeAvatar.colors.length * parseInt(bitPattern, 2)) / Math.pow(2, 32));\n      this.color1 = PfeAvatar.colors[this._colorIndex].color1;\n      this.color2 = PfeAvatar.colors[this._colorIndex].color2;\n\n      this._clear();\n      this._drawBackground();\n      if (this.pattern === PfeAvatar.patterns.squares) {\n        this._drawSquarePattern(arrPattern);\n      } else if (this.pattern === PfeAvatar.patterns.triangles) {\n        this._drawTrianglePattern(arrPattern);\n      }\n      // this._drawGradient();\n    }\n  }\n\n  _clear() {\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n\n  _drawBackground() {\n    this._ctx.fillStyle = this.color1;\n    this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n\n  _drawSquarePattern(pattern) {\n    this._ctx.fillStyle = this.color2;\n    if (this._ctx) {\n      let i = pattern.length;\n      while (i--) {\n        if (pattern[i]) {\n          this._drawMirroredSquare(i % 4, Math.floor(i / 4));\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw a square at the given position, mirrored onto both the left and right half of the canvas.\n   */\n  _drawMirroredSquare(x, y) {\n    if (this._ctx) {\n      this._drawSquare(x, y);\n      this._drawSquare(7 - x, y);\n    }\n  }\n\n  _drawSquare(x, y) {\n    this._ctx.fillRect(this._squareSize * x, this._squareSize * y, this._squareSize, this._squareSize);\n  }\n\n  _drawTrianglePattern(pattern) {\n    this._ctx.fillStyle = this.color2;\n    if (this._ctx) {\n      let i = pattern.length;\n      while (i--) {\n        if (pattern[i]) {\n          const x = Math.floor(i / 2) % 2;\n          const y = Math.floor(i / 4);\n          const alt = i % 4;\n\n          const p1 = [x, y];\n          const p2 = [x, y];\n          const p3 = [x, y];\n\n          switch (alt) {\n            case 0:\n              p2[1]++;\n              p3[0]++;\n              p3[1]++;\n              break;\n            case 1:\n              p2[0]++;\n              p3[0]++;\n              p3[1]++;\n              break;\n            case 2:\n              p2[0]++;\n              p3[1]++;\n              break;\n            case 3:\n              p1[0]++;\n              p2[0]++;\n              p2[1]++;\n              p3[1]++;\n              break;\n          }\n\n          this._drawMirroredTriangle(p1, p2, p3);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw a square at the given position in the top-left quadrant of the\n   * canvas, and mirrored to the other three quadrants.\n   */\n  _drawMirroredTriangle(p1, p2, p3) {\n    if (this._ctx) {\n      this._drawTriangle(p1, p2, p3);\n      this._drawTriangle([4 - p1[0], p1[1]], [4 - p2[0], p2[1]], [4 - p3[0], p3[1]]);\n    }\n  }\n\n  _drawTriangle(p1, p2, p3) {\n    this._ctx.beginPath();\n    this._ctx.moveTo(...p1.map((c) => c * this._triangleSize));\n    this._ctx.lineTo(...p2.map((c) => c * this._triangleSize));\n    this._ctx.lineTo(...p3.map((c) => c * this._triangleSize));\n    this._ctx.closePath();\n    this._ctx.fill();\n    this._ctx.fill();\n  }\n\n  _drawGradient() {\n    const gradient = this._ctx.createLinearGradient(0, this._canvas.height, this._canvas.width, 0);\n    const color = this.color2;\n    let gradientColor1 = color;\n    let gradientColor2 = color;\n    if (/^#[A-f0-9]{3}$/.test(color)) {\n      // color is of the form \"#fff\"\n      gradientColor1 += \"c\";\n      gradientColor2 += \"0\";\n    } else if (/^#[A-f0-9]{6}$/.test(color)) {\n      // color is of the form \"#ffffff\"\n      gradientColor1 += \"cc\";\n      gradientColor2 += \"00\";\n    }\n    gradient.addColorStop(0, gradientColor1);\n    gradient.addColorStop(1, gradientColor2);\n    gradient.addColorStop(1, gradientColor1);\n    this._ctx.fillStyle = gradient;\n    this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n}\n\nPfeAvatar._registerColors();\n\nPFElement.create(PfeAvatar);\n\nexport default PfeAvatar;\n","/**\n * djb2 string hashing function.\n *\n * @see http://www.cse.yorku.ca/~oz/hash.html\n * @param {String} str the string to hash.\n * @return {Number} a positive integer\n */\n\nfunction hash(str) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  return hash >>> 0;\n}\n\nexport { hash };\n"],"names":["h2rgb","v1","v2","vH","PfeAvatar","PFElement","this","cssVariable","String","patterns","squares","tag","_initCanvas","emitEvent","events","connected","_canvas","shadowRoot","querySelector","cssVarWidth","size","replace","defaultSize","width","height","_squareSize","_triangleSize","_ctx","getContext","hasAttribute","update","addEventListener","_this2","bitPattern","arrPattern","src","str","hash","i","length","charCodeAt","name","toString","split","map","n","Number","_colorIndex","Math","floor","colors","parseInt","pow","color1","color2","_clear","_drawBackground","pattern","_drawSquarePattern","triangles","_drawTrianglePattern","clearRect","fillStyle","fillRect","_drawMirroredSquare","x","y","_drawSquare","p1","p2","p3","_drawMirroredTriangle","_drawTriangle","beginPath","moveTo","c","_this3","lineTo","closePath","fill","gradient","createLinearGradient","color","gradientColor1","gradientColor2","test","addColorStop","customColors","defaultColors","forEach","colorCode","exec","shift","_registerColor","log","push","join","_adjustColor","hsl","_R","_G","_B","H","S","r","max","min","g","b","var_min","var_max","del_max","L","del_r","del_g","del_b","_H","_S","_L","R","G","B","a","_this","bind","_registerColors","create"],"mappings":"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"}